{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080'\n});\n\n// Function to request a new access token using a refresh token\nconst refreshAccessToken = async () => {\n  try {\n    const refreshToken = localStorage.getItem('refresh_token');\n    // Using axiosInstance instead of axios directly\n    const response = await axiosInstance.post('/api/token/refresh', {\n      refreshToken\n    });\n    return response.data.accessToken; // Make sure the key matches what your server sends\n  } catch (error) {\n    console.warn('Failed to refresh access token:', error);\n    return null;\n  }\n};\naxiosInstance.interceptors.request.use(async config => {\n  let token = localStorage.getItem('token');\n  if (token) {\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    if (decodedToken.exp < currentTime) {\n      console.warn('Token has expired, attempting to refresh...');\n      token = await refreshAccessToken();\n      if (token) {\n        localStorage.setItem('token', token);\n      } else {\n        console.warn('Could not refresh token');\n        // Additional logic to handle token refresh failure (e.g., redirect to login)\n      }\n    }\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Token included in request headers:', token);\n    }\n  } else {\n    console.log('No token found, skipping authorization header');\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, async error => {\n  if (error.response && error.response.status === 401) {\n    const newToken = await refreshAccessToken();\n    if (newToken) {\n      localStorage.setItem('token', newToken);\n      error.config.headers.Authorization = `Bearer ${newToken}`;\n      return axiosInstance.request(error.config);\n    } else {\n      console.warn('Unauthorized: Could not refresh token');\n      // Handle redirect to login or other action upon token refresh failure\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","jwtDecode","axiosInstance","create","baseURL","refreshAccessToken","refreshToken","localStorage","getItem","response","post","data","accessToken","error","console","warn","interceptors","request","use","config","token","decodedToken","currentTime","Date","now","exp","setItem","headers","Authorization","log","Promise","reject","status","newToken"],"sources":["D:/laragon/www/Node exercises/repos/fsv-front-end/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8080'\r\n});\r\n\r\n// Function to request a new access token using a refresh token\r\nconst refreshAccessToken = async () => {\r\n    try {\r\n        const refreshToken = localStorage.getItem('refresh_token');\r\n        // Using axiosInstance instead of axios directly\r\n        const response = await axiosInstance.post('/api/token/refresh', { refreshToken });\r\n        return response.data.accessToken; // Make sure the key matches what your server sends\r\n    } catch (error) {\r\n        console.warn('Failed to refresh access token:', error);\r\n        return null;\r\n    }\r\n};\r\n\r\naxiosInstance.interceptors.request.use(async config => {\r\n    let token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n        const decodedToken = jwtDecode(token);\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        if (decodedToken.exp < currentTime) {\r\n            console.warn('Token has expired, attempting to refresh...');\r\n            token = await refreshAccessToken();\r\n\r\n            if (token) {\r\n                localStorage.setItem('token', token);\r\n            } else {\r\n                console.warn('Could not refresh token');\r\n                // Additional logic to handle token refresh failure (e.g., redirect to login)\r\n            }\r\n        }\r\n\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n            console.log('Token included in request headers:', token);\r\n        }\r\n    } else {\r\n        console.log('No token found, skipping authorization header');\r\n    }\r\n\r\n    return config;\r\n}, error => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n});\r\n\r\naxiosInstance.interceptors.response.use((response) => {\r\n    return response;\r\n}, async (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n        const newToken = await refreshAccessToken();\r\n\r\n        if (newToken) {\r\n            localStorage.setItem('token', newToken);\r\n            error.config.headers.Authorization = `Bearer ${newToken}`;\r\n            return axiosInstance.request(error.config);\r\n        } else {\r\n            console.warn('Unauthorized: Could not refresh token');\r\n            // Handle redirect to login or other action upon token refresh failure\r\n        }\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC1D;IACA,MAAMC,QAAQ,GAAG,MAAMP,aAAa,CAACQ,IAAI,CAAC,oBAAoB,EAAE;MAAEJ;IAAa,CAAC,CAAC;IACjF,OAAOG,QAAQ,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEF,KAAK,CAAC;IACtD,OAAO,IAAI;EACf;AACJ,CAAC;AAEDX,aAAa,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,MAAMC,MAAM,IAAI;EACnD,IAAIC,KAAK,GAAGb,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAEzC,IAAIY,KAAK,EAAE;IACP,MAAMC,YAAY,GAAGpB,SAAS,CAACmB,KAAK,CAAC;IACrC,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IAErC,IAAIH,YAAY,CAACI,GAAG,GAAGH,WAAW,EAAE;MAChCR,OAAO,CAACC,IAAI,CAAC,6CAA6C,CAAC;MAC3DK,KAAK,GAAG,MAAMf,kBAAkB,CAAC,CAAC;MAElC,IAAIe,KAAK,EAAE;QACPb,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;MACxC,CAAC,MAAM;QACHN,OAAO,CAACC,IAAI,CAAC,yBAAyB,CAAC;QACvC;MACJ;IACJ;;IAEA,IAAIK,KAAK,EAAE;MACPD,MAAM,CAACQ,OAAO,CAACC,aAAa,GAAI,UAASR,KAAM,EAAC;MAChDN,OAAO,CAACe,GAAG,CAAC,oCAAoC,EAAET,KAAK,CAAC;IAC5D;EACJ,CAAC,MAAM;IACHN,OAAO,CAACe,GAAG,CAAC,+CAA+C,CAAC;EAChE;EAEA,OAAOV,MAAM;AACjB,CAAC,EAAEN,KAAK,IAAI;EACRC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOiB,OAAO,CAACC,MAAM,CAAClB,KAAK,CAAC;AAChC,CAAC,CAAC;AAEFX,aAAa,CAACc,YAAY,CAACP,QAAQ,CAACS,GAAG,CAAET,QAAQ,IAAK;EAClD,OAAOA,QAAQ;AACnB,CAAC,EAAE,MAAOI,KAAK,IAAK;EAChB,IAAIA,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACJ,QAAQ,CAACuB,MAAM,KAAK,GAAG,EAAE;IACjD,MAAMC,QAAQ,GAAG,MAAM5B,kBAAkB,CAAC,CAAC;IAE3C,IAAI4B,QAAQ,EAAE;MACV1B,YAAY,CAACmB,OAAO,CAAC,OAAO,EAAEO,QAAQ,CAAC;MACvCpB,KAAK,CAACM,MAAM,CAACQ,OAAO,CAACC,aAAa,GAAI,UAASK,QAAS,EAAC;MACzD,OAAO/B,aAAa,CAACe,OAAO,CAACJ,KAAK,CAACM,MAAM,CAAC;IAC9C,CAAC,MAAM;MACHL,OAAO,CAACC,IAAI,CAAC,uCAAuC,CAAC;MACrD;IACJ;EACJ;;EAEA,OAAOe,OAAO,CAACC,MAAM,CAAClB,KAAK,CAAC;AAChC,CAAC,CAAC;AAEF,eAAeX,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}