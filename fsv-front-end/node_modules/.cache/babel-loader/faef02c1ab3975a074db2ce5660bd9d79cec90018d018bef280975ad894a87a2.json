{"ast":null,"code":"import { mapState, mapGetters } from 'vuex';\nimport api from \"@/api/api\";\nexport default {\n  name: \"ProductDetailPage\",\n  props: ['productId'],\n  data() {\n    return {\n      product: null,\n      email: \"\",\n      password: \"\",\n      showSuccessMessage: false,\n      itemsIsInCart: false\n    };\n  },\n  computed: {\n    ...mapState({\n      userEmail: 'email',\n      userPassword: 'password'\n    }),\n    ...mapGetters(['isAuthenticated'])\n  },\n  methods: {\n    async addToCart() {\n      if (!this.isAuthenticated) {\n        console.error(\"User is not authenticated. Please log in.\");\n        return;\n      }\n      try {\n        const response = await api.post('/api/cart/add', {\n          email: this.userEmail,\n          password: this.userPassword,\n          cartItems: this.cartItems\n        });\n        if (response.status === 200) {\n          this.showSuccessMessage = true;\n          this.itemsIsInCart = true;\n          setTimeout(() => {\n            this.showSuccessMessage = false;\n          }, 3000);\n        } else {\n          console.error(\"Failed to add to cart on the server\");\n        }\n      } catch (error) {\n        console.error(\"Failed to add to cart:\", error);\n        console.error(\"Error details:\", error.response.data); // This should give more info on the API error\n        this.showSuccessMessage = false;\n        this.itemsIsInCart = false;\n      }\n    },\n    async fetchData() {\n      try {\n        const productId = Number(this.$route.params.id);\n        console.log(\"Product ID from route:\", productId);\n        const productResult = await api.get(`/api/products/${productId}`);\n        this.product = productResult.data;\n\n        // Log the retrieved product data\n        console.log(\"Product data:\", this.product);\n        if (this.product.id === undefined) {\n          console.error(\"Product ID is undefined in the fetched data.\");\n          return;\n        }\n        if (this.user && this.cartItems) {\n          this.itemsIsInCart = this.cartItems.includes(this.product.id);\n          console.log(\"Is in cart:\", this.itemsIsInCart);\n        }\n      } catch (error) {\n        console.error(\"An error occurred while fetching data:\", error);\n      }\n    }\n  },\n  async created() {\n    //alert(this.$route.params.id);\n    // console.log(\"ProductDetailPage created hook\");\n    try {\n      const result = await api.get('/api/products/' + this.productId);\n      console.log(\"Result:\", result);\n      const apiResult = result.data;\n      this.product = apiResult;\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n  }\n};","map":{"version":3,"names":["mapState","mapGetters","api","name","props","data","product","email","password","showSuccessMessage","itemsIsInCart","computed","userEmail","userPassword","methods","addToCart","isAuthenticated","console","error","response","post","cartItems","status","setTimeout","fetchData","productId","Number","$route","params","id","log","productResult","get","undefined","user","includes","created","result","apiResult"],"sources":["src/views/ProductDetailPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\">\r\n    <div id=\"img-wrap\">\r\n\r\n\r\n      <!-- <img :src=\"require(`../assets/${product.imageUrl}`).default\"> -->\r\n    </div>\r\n    <div id=\"product-details\">\r\n      <h1>{{ product ? product.name : 'Loading...' }}</h1>\r\n      <h3 id=\"price\">$ {{ product ? product.price : 'Loading...' }}</h3>\r\n      <p v-if=\"product\">Average rating: {{ product.averageRating }}</p>\r\n\r\n      <!-- Add to Cart Button -->\r\n      <button\r\n          class=\"add-to-cart\"\r\n          v-if=\"product && !itemsIsInCart && !showSuccessMessage\"\r\n          @click=\"addToCart(product)\"\r\n      >Add to Cart\r\n      </button>\r\n      <button\r\n          class=\"green-button add-to-cart\"\r\n          v-if=\"product && !itemsIsInCart && showSuccessMessage\"\r\n      >Successfully added item to cart!\r\n      </button>\r\n      <button\r\n          class=\"grey-button add-to-cart\"\r\n          v-if=\"product && itemsIsInCart\"\r\n      >Item is already in cart!\r\n      </button>\r\n\r\n      <!-- Product Description -->\r\n      <h4 v-if=\"product\">Description</h4>\r\n      <p v-if=\"product\">{{ product.description }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport { mapState, mapGetters } from 'vuex';\r\nimport api from \"@/api/api\";\r\n\r\nexport default {\r\n  name: \"ProductDetailPage\",\r\n  props: ['productId'],\r\n  data() {\r\n    return {\r\n      product: null,\r\n      email: \"\",\r\n      password: \"\",\r\n      showSuccessMessage: false,\r\n      itemsIsInCart: false\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState({\r\n      userEmail: 'email',\r\n      userPassword: 'password'\r\n    }),\r\n    ...mapGetters(['isAuthenticated'])\r\n  },\r\n  methods: {\r\n    async addToCart() {\r\n\r\n      if (!this.isAuthenticated) {\r\n        console.error(\"User is not authenticated. Please log in.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n\r\n\r\n        const response = await api.post('/api/cart/add', {\r\n          email: this.userEmail,\r\n          password: this.userPassword,\r\n          cartItems: this.cartItems,\r\n        });\r\n\r\n\r\n\r\n        if (response.status === 200) {\r\n\r\n          this.showSuccessMessage = true;\r\n          this.itemsIsInCart = true;\r\n\r\n          setTimeout(() => {\r\n            this.showSuccessMessage = false;\r\n          }, 3000);\r\n        } else {\r\n          console.error(\"Failed to add to cart on the server\");\r\n        }\r\n      }catch (error) {\r\n        console.error(\"Failed to add to cart:\", error);\r\n        console.error(\"Error details:\", error.response.data); // This should give more info on the API error\r\n        this.showSuccessMessage = false;\r\n        this.itemsIsInCart = false;\r\n      }\r\n\r\n    },\r\n    async fetchData() {\r\n      try {\r\n\r\n        const productId = Number(this.$route.params.id);\r\n        console.log(\"Product ID from route:\", productId);\r\n\r\n        const productResult = await api.get(`/api/products/${productId}`);\r\n        this.product = productResult.data;\r\n\r\n        // Log the retrieved product data\r\n        console.log(\"Product data:\", this.product);\r\n\r\n        if (this.product.id === undefined) {\r\n          console.error(\"Product ID is undefined in the fetched data.\");\r\n          return;\r\n        }\r\n\r\n        if (this.user && this.cartItems) {\r\n          this.itemsIsInCart = this.cartItems.includes(this.product.id);\r\n          console.log(\"Is in cart:\", this.itemsIsInCart);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching data:\", error);\r\n      }\r\n    }\r\n\r\n  },\r\n  async created() {\r\n    //alert(this.$route.params.id);\r\n    // console.log(\"ProductDetailPage created hook\");\r\n    try {\r\n      const result = await api.get('/api/products/' + this.productId);\r\n      console.log(\"Result:\", result);\r\n      const apiResult = result.data;\r\n      this.product = apiResult;\r\n    } catch (error) {\r\n      console.error('An error occurred while fetching data:', error);\r\n    }\r\n  },\r\n\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  max-width: 600px;\r\n}\r\n\r\n#img-wrap {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  width: 400px;\r\n}\r\n\r\n#product-details {\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.add-to-cart {\r\n  width: 100%;\r\n}\r\n\r\n#price {\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 16px;\r\n}\r\n\r\n.green-button {\r\n  background-color: green\r\n}\r\n\r\n.grey-button {\r\n  background-color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAuCA,SAAAA,QAAA,EAAAC,UAAA;AACA,OAAAC,GAAA;AAEA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;MACAC,QAAA;MACAC,kBAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAX,QAAA;MACAY,SAAA;MACAC,YAAA;IACA;IACA,GAAAZ,UAAA;EACA;EACAa,OAAA;IACA,MAAAC,UAAA;MAEA,UAAAC,eAAA;QACAC,OAAA,CAAAC,KAAA;QACA;MACA;MAEA;QAGA,MAAAC,QAAA,SAAAjB,GAAA,CAAAkB,IAAA;UACAb,KAAA,OAAAK,SAAA;UACAJ,QAAA,OAAAK,YAAA;UACAQ,SAAA,OAAAA;QACA;QAIA,IAAAF,QAAA,CAAAG,MAAA;UAEA,KAAAb,kBAAA;UACA,KAAAC,aAAA;UAEAa,UAAA;YACA,KAAAd,kBAAA;UACA;QACA;UACAQ,OAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACAD,OAAA,CAAAC,KAAA,2BAAAA,KAAA;QACAD,OAAA,CAAAC,KAAA,mBAAAA,KAAA,CAAAC,QAAA,CAAAd,IAAA;QACA,KAAAI,kBAAA;QACA,KAAAC,aAAA;MACA;IAEA;IACA,MAAAc,UAAA;MACA;QAEA,MAAAC,SAAA,GAAAC,MAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;QACAZ,OAAA,CAAAa,GAAA,2BAAAL,SAAA;QAEA,MAAAM,aAAA,SAAA7B,GAAA,CAAA8B,GAAA,kBAAAP,SAAA;QACA,KAAAnB,OAAA,GAAAyB,aAAA,CAAA1B,IAAA;;QAEA;QACAY,OAAA,CAAAa,GAAA,uBAAAxB,OAAA;QAEA,SAAAA,OAAA,CAAAuB,EAAA,KAAAI,SAAA;UACAhB,OAAA,CAAAC,KAAA;UACA;QACA;QAEA,SAAAgB,IAAA,SAAAb,SAAA;UACA,KAAAX,aAAA,QAAAW,SAAA,CAAAc,QAAA,MAAA7B,OAAA,CAAAuB,EAAA;UACAZ,OAAA,CAAAa,GAAA,qBAAApB,aAAA;QACA;MACA,SAAAQ,KAAA;QACAD,OAAA,CAAAC,KAAA,2CAAAA,KAAA;MACA;IACA;EAEA;EACA,MAAAkB,QAAA;IACA;IACA;IACA;MACA,MAAAC,MAAA,SAAAnC,GAAA,CAAA8B,GAAA,yBAAAP,SAAA;MACAR,OAAA,CAAAa,GAAA,YAAAO,MAAA;MACA,MAAAC,SAAA,GAAAD,MAAA,CAAAhC,IAAA;MACA,KAAAC,OAAA,GAAAgC,SAAA;IACA,SAAApB,KAAA;MACAD,OAAA,CAAAC,KAAA,2CAAAA,KAAA;IACA;EACA;AAGA"},"metadata":{},"sourceType":"module","externalDependencies":[]}