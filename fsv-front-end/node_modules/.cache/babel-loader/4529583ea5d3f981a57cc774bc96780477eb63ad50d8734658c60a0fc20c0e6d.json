{"ast":null,"code":"import api from \"@/api/api\";\nexport default {\n  name: \"ProductDetailPage\",\n  props: ['productId'],\n  data() {\n    return {\n      product: '',\n      email: \"\",\n      password: \"\",\n      showSuccessMessage: false,\n      itemsIsInCart: false\n    };\n  },\n  getters: {\n    isAuthenticated(state, getters) {\n      return getters.isAuthenticated;\n    },\n    methods: {\n      async addToCart(product) {\n        if (!this.isAuthenticated) {\n          console.error(\"User is not authenticated. Please log in.\");\n          return;\n        }\n        const response = await fetch(\"http://localhost:8006/api/login\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            email: this.email,\n            password: this.password\n          })\n        });\n        try {\n          if (response.ok) {\n            const data = await response.json();\n            data.user.password = this.password;\n            console.log(data.user);\n            this.$store.commit(\"setUser\", data.user);\n          }\n        } catch (error) {\n          console.error(\"Failed to add to cart:\", error);\n          this.showSuccessMessage = false;\n          this.itemsIsInCart = false;\n        }\n      },\n      async fetchData() {\n        try {\n          const productId = Number(this.$route.params.id);\n          console.log(\"Product ID from route:\", productId);\n          const productResult = await api.get(`/api/products/${productId}`);\n          this.product = productResult.data;\n\n          // Log the retrieved product data\n          console.log(\"Product data:\", this.product);\n          if (this.product.id === undefined) {\n            console.error(\"Product ID is undefined in the fetched data.\");\n            return;\n          }\n          if (this.user && this.cartItems) {\n            this.itemsIsInCart = this.cartItems.includes(this.product.id);\n            console.log(\"Is in cart:\", this.itemsIsInCart);\n          }\n        } catch (error) {\n          console.error(\"An error occurred while fetching data:\", error);\n        }\n      }\n    },\n    async created() {\n      //alert(this.$route.params.id);\n      // console.log(\"ProductDetailPage created hook\");\n      try {\n        const result = await api.get('/api/products/' + this.productId);\n        console.log(\"Result:\", result);\n        const apiResult = result.data;\n        this.product = apiResult;\n      } catch (error) {\n        console.error('An error occurred while fetching data:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","name","props","data","product","email","password","showSuccessMessage","itemsIsInCart","getters","isAuthenticated","state","methods","addToCart","console","error","response","fetch","method","headers","body","JSON","stringify","ok","json","user","log","$store","commit","fetchData","productId","Number","$route","params","id","productResult","get","undefined","cartItems","includes","created","result","apiResult"],"sources":["src/views/ProductDetailPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\">\r\n    <div id=\"img-wrap\">\r\n\r\n\r\n      <!-- <img :src=\"require(`../assets/${product.imageUrl}`).default\"> -->\r\n    </div>\r\n    <div id=\"product-details\">\r\n      <h1>{{ product ? product.name : 'Loading...' }}</h1>\r\n      <h3 id=\"price\">$ {{ product ? product.price : 'Loading...' }}</h3>\r\n      <p v-if=\"product\">Average rating: {{ product.averageRating }}</p>\r\n\r\n      <!-- Add to Cart Button -->\r\n      <button\r\n          class=\"add-to-cart\"\r\n          v-if=\"product && !itemsIsInCart && !showSuccessMessage\"\r\n          @click=\"addToCart(product)\"\r\n      >Add to Cart\r\n      </button>\r\n      <button\r\n          class=\"green-button add-to-cart\"\r\n          v-if=\"product && !itemsIsInCart && showSuccessMessage\"\r\n      >Successfully added item to cart!\r\n      </button>\r\n      <button\r\n          class=\"grey-button add-to-cart\"\r\n          v-if=\"product && itemsIsInCart\"\r\n      >Item is already in cart!\r\n      </button>\r\n\r\n      <!-- Product Description -->\r\n      <h4 v-if=\"product\">Description</h4>\r\n      <p v-if=\"product\">{{ product.description }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n\r\nimport api from \"@/api/api\";\r\n\r\nexport default {\r\n  name: \"ProductDetailPage\",\r\n  props: ['productId'],\r\n  data() {\r\n    return {\r\n      product: '',\r\n      email: \"\",\r\n      password: \"\",\r\n      showSuccessMessage: false,\r\n      itemsIsInCart: false\r\n    }\r\n  },\r\n  getters: {\r\n    isAuthenticated(state, getters) {\r\n      return getters.isAuthenticated\r\n    },\r\n    methods: {\r\n      async addToCart(product) {\r\n\r\n        if (!this.isAuthenticated) {\r\n          console.error(\"User is not authenticated. Please log in.\");\r\n          return;\r\n        }\r\n        const response = await fetch(\"http://localhost:8006/api/login\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            email: this.email,\r\n            password: this.password,\r\n          }),\r\n        });\r\n        try {\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            data.user.password = this.password;\r\n            console.log(data.user)\r\n            this.$store.commit(\"setUser\", data.user);\r\n\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Failed to add to cart:\", error);\r\n          this.showSuccessMessage = false;\r\n          this.itemsIsInCart = false;\r\n        }\r\n      },\r\n      async fetchData() {\r\n        try {\r\n\r\n          const productId = Number(this.$route.params.id);\r\n          console.log(\"Product ID from route:\", productId);\r\n\r\n          const productResult = await api.get(`/api/products/${productId}`);\r\n          this.product = productResult.data;\r\n\r\n          // Log the retrieved product data\r\n          console.log(\"Product data:\", this.product);\r\n\r\n          if (this.product.id === undefined) {\r\n            console.error(\"Product ID is undefined in the fetched data.\");\r\n            return;\r\n          }\r\n\r\n          if (this.user && this.cartItems) {\r\n            this.itemsIsInCart = this.cartItems.includes(this.product.id);\r\n            console.log(\"Is in cart:\", this.itemsIsInCart);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"An error occurred while fetching data:\", error);\r\n        }\r\n      }\r\n\r\n    },\r\n    async created() {\r\n      //alert(this.$route.params.id);\r\n      // console.log(\"ProductDetailPage created hook\");\r\n      try {\r\n        const result = await api.get('/api/products/' + this.productId);\r\n        console.log(\"Result:\", result);\r\n        const apiResult = result.data;\r\n        this.product = apiResult;\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching data:', error);\r\n      }\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  max-width: 600px;\r\n}\r\n\r\n#img-wrap {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  width: 400px;\r\n}\r\n\r\n#product-details {\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.add-to-cart {\r\n  width: 100%;\r\n}\r\n\r\n#price {\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 16px;\r\n}\r\n\r\n.green-button {\r\n  background-color: green\r\n}\r\n\r\n.grey-button {\r\n  background-color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAwCA,OAAAA,GAAA;AAEA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;MACAC,QAAA;MACAC,kBAAA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACAC,gBAAAC,KAAA,EAAAF,OAAA;MACA,OAAAA,OAAA,CAAAC,eAAA;IACA;IACAE,OAAA;MACA,MAAAC,UAAAT,OAAA;QAEA,UAAAM,eAAA;UACAI,OAAA,CAAAC,KAAA;UACA;QACA;QACA,MAAAC,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YACAjB,KAAA,OAAAA,KAAA;YACAC,QAAA,OAAAA;UACA;QACA;QACA;UACA,IAAAU,QAAA,CAAAO,EAAA;YACA,MAAApB,IAAA,SAAAa,QAAA,CAAAQ,IAAA;YACArB,IAAA,CAAAsB,IAAA,CAAAnB,QAAA,QAAAA,QAAA;YACAQ,OAAA,CAAAY,GAAA,CAAAvB,IAAA,CAAAsB,IAAA;YACA,KAAAE,MAAA,CAAAC,MAAA,YAAAzB,IAAA,CAAAsB,IAAA;UAEA;QACA,SAAAV,KAAA;UACAD,OAAA,CAAAC,KAAA,2BAAAA,KAAA;UACA,KAAAR,kBAAA;UACA,KAAAC,aAAA;QACA;MACA;MACA,MAAAqB,UAAA;QACA;UAEA,MAAAC,SAAA,GAAAC,MAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;UACApB,OAAA,CAAAY,GAAA,2BAAAI,SAAA;UAEA,MAAAK,aAAA,SAAAnC,GAAA,CAAAoC,GAAA,kBAAAN,SAAA;UACA,KAAA1B,OAAA,GAAA+B,aAAA,CAAAhC,IAAA;;UAEA;UACAW,OAAA,CAAAY,GAAA,uBAAAtB,OAAA;UAEA,SAAAA,OAAA,CAAA8B,EAAA,KAAAG,SAAA;YACAvB,OAAA,CAAAC,KAAA;YACA;UACA;UAEA,SAAAU,IAAA,SAAAa,SAAA;YACA,KAAA9B,aAAA,QAAA8B,SAAA,CAAAC,QAAA,MAAAnC,OAAA,CAAA8B,EAAA;YACApB,OAAA,CAAAY,GAAA,qBAAAlB,aAAA;UACA;QACA,SAAAO,KAAA;UACAD,OAAA,CAAAC,KAAA,2CAAAA,KAAA;QACA;MACA;IAEA;IACA,MAAAyB,QAAA;MACA;MACA;MACA;QACA,MAAAC,MAAA,SAAAzC,GAAA,CAAAoC,GAAA,yBAAAN,SAAA;QACAhB,OAAA,CAAAY,GAAA,YAAAe,MAAA;QACA,MAAAC,SAAA,GAAAD,MAAA,CAAAtC,IAAA;QACA,KAAAC,OAAA,GAAAsC,SAAA;MACA,SAAA3B,KAAA;QACAD,OAAA,CAAAC,KAAA,2CAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}