{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from \"@/api/api\";\nimport { mapState } from \"vuex\";\nexport default {\n  data() {\n    return {\n      product: {\n        name: \"\"\n      },\n      itemsIsInCart: false,\n      showSuccessMessage: false\n    };\n  },\n  computed: {\n    ...mapState([\"user\", \"cart\"])\n  },\n  methods: {\n    async addToCart(product) {\n      if (!this.user || !this.user.email || !this.user.password) {\n        console.error(\"User is not authenticated. Please log in.\");\n        return;\n      }\n      try {\n        console.log(\"Adding to cart:\", product);\n        console.log(\"Product ID:\", product.id);\n        const response = await api.post('/api/cart/add', {\n          email: this.user.email,\n          // Use user.email from Vuex\n          password: this.user.password,\n          // Use user.password from Vuex\n          productId: product.id\n        });\n        if (response.status === 200) {\n          console.log(\"Product added to cart successfully on the server\");\n          this.showSuccessMessage = true;\n          this.itemsIsInCart = true;\n          setTimeout(() => {\n            this.showSuccessMessage = false;\n          }, 3000);\n        } else {\n          console.error(\"Failed to add to cart on the server\");\n        }\n      } catch (error) {\n        console.error(\"Failed to add to cart:\", error);\n        this.showSuccessMessage = false;\n        this.itemsIsInCart = false;\n      }\n    },\n    async fetchData() {\n      try {\n        const productId = this.$route.params.id;\n        const productResult = await api.get(`/api/products/${productId}`);\n        this.product = productResult.data;\n        console.log(\"Product imageUrl:\", this.product.imageUrl);\n        console.log(\"Product data:\", this.product);\n\n        // Check if the product is in the user's cart (you can use this.user.cartItems)\n        if (this.user && this.user.cartItems) {\n          this.itemsIsInCart = this.user.cartItems.includes(this.product.id);\n        }\n      } catch (error) {\n        console.error(\"An error occurred while fetching data:\", error);\n      }\n    }\n  },\n  created() {\n    if (!this.isAuthenticated) {\n      this.$router.push(\"/login\");\n      return;\n    }\n    console.log(\"User data in Vuex store:\", this.user);\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["api","mapState","data","product","name","itemsIsInCart","showSuccessMessage","computed","methods","addToCart","user","email","password","console","error","log","id","response","post","productId","status","setTimeout","fetchData","$route","params","productResult","get","imageUrl","cartItems","includes","created","isAuthenticated","$router","push"],"sources":["src/views/ProductDetailPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\">\r\n    <div id=\"img-wrap\">\r\n<!--    <img :src=\"require(`../assets/${product.imageUrl}`).default\">-->\r\n    </div>\r\n    <div id=\"product-details\">\r\n      <h1>{{ product.name }}</h1>\r\n      <h3 id=\"price\">$ {{ product.price }}</h3>\r\n      <p>Average rating: {{ product.averageRating }}</p>\r\n      <button\r\n          class=\"add-to-cart\"\r\n          v-if=\"!itemsIsInCart && !showSuccessMessage\"\r\n          @click=\"addToCart(product)\"\r\n      >Add to Cart</button>\r\n\r\n      <button\r\n          class=\"green-button add-to-cart\"\r\n          v-if=\"!itemsIsInCart && showSuccessMessage\"\r\n      >Successfully added item to cart!</button>\r\n\r\n      <button\r\n          class=\"grey-button add-to-cart\"\r\n          v-if=\"itemsIsInCart\"\r\n      >Item is already in cart!</button>\r\n\r\n      <h4>Description</h4>\r\n      <p>{{ product.description }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/api/api\";\r\nimport { mapState } from \"vuex\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      product: {\r\n        name: \"\"\r\n      },\r\n      itemsIsInCart: false,\r\n      showSuccessMessage: false,\r\n    };\r\n  },\r\n  computed: {\r\n    ...mapState([\"user\", \"cart\"]),\r\n  },\r\n  methods: {\r\n    async addToCart(product) {\r\n      if (!this.user || !this.user.email || !this.user.password) {\r\n        console.error(\"User is not authenticated. Please log in.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        console.log(\"Adding to cart:\", product);\r\n        console.log(\"Product ID:\", product.id);\r\n\r\n        const response = await api.post('/api/cart/add', {\r\n          email: this.user.email, // Use user.email from Vuex\r\n          password: this.user.password, // Use user.password from Vuex\r\n          productId: product.id\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          console.log(\"Product added to cart successfully on the server\");\r\n\r\n          this.showSuccessMessage = true;\r\n          this.itemsIsInCart = true;\r\n\r\n          setTimeout(() => {\r\n            this.showSuccessMessage = false;\r\n          }, 3000);\r\n        } else {\r\n          console.error(\"Failed to add to cart on the server\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to add to cart:\", error);\r\n        this.showSuccessMessage = false;\r\n        this.itemsIsInCart = false;\r\n      }\r\n    },\r\n    async fetchData() {\r\n      try {\r\n        const productId = this.$route.params.id;\r\n        const productResult = await api.get(`/api/products/${productId}`);\r\n        this.product = productResult.data;\r\n        console.log(\"Product imageUrl:\", this.product.imageUrl);\r\n\r\n        console.log(\"Product data:\", this.product);\r\n\r\n        // Check if the product is in the user's cart (you can use this.user.cartItems)\r\n        if (this.user && this.user.cartItems) {\r\n          this.itemsIsInCart = this.user.cartItems.includes(this.product.id);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching data:\", error);\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    if (!this.isAuthenticated) {\r\n\r\n      this.$router.push(\"/login\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"User data in Vuex store:\", this.user);\r\n    this.fetchData();\r\n  },\r\n\r\n};\r\n</script>\r\n\r\n\r\n\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  max-width: 600px;\r\n}\r\n\r\n#img-wrap {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  width: 400px;\r\n}\r\n\r\n#product-details {\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.add-to-cart {\r\n  width: 100%;\r\n}\r\n\r\n#price {\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 16px;\r\n}\r\n.green-button{\r\nbackground-color: green\r\n}\r\n.grey-button{\r\n  background-color: gray;\r\n}\r\n</style>\r\n"],"mappings":";AAgCA,OAAAA,GAAA;AACA,SAAAC,QAAA;AAEA;EACAC,KAAA;IACA;MACAC,OAAA;QACAC,IAAA;MACA;MACAC,aAAA;MACAC,kBAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAN,QAAA;EACA;EACAO,OAAA;IACA,MAAAC,UAAAN,OAAA;MACA,UAAAO,IAAA,UAAAA,IAAA,CAAAC,KAAA,UAAAD,IAAA,CAAAE,QAAA;QACAC,OAAA,CAAAC,KAAA;QACA;MACA;MAEA;QACAD,OAAA,CAAAE,GAAA,oBAAAZ,OAAA;QACAU,OAAA,CAAAE,GAAA,gBAAAZ,OAAA,CAAAa,EAAA;QAEA,MAAAC,QAAA,SAAAjB,GAAA,CAAAkB,IAAA;UACAP,KAAA,OAAAD,IAAA,CAAAC,KAAA;UAAA;UACAC,QAAA,OAAAF,IAAA,CAAAE,QAAA;UAAA;UACAO,SAAA,EAAAhB,OAAA,CAAAa;QACA;QAEA,IAAAC,QAAA,CAAAG,MAAA;UACAP,OAAA,CAAAE,GAAA;UAEA,KAAAT,kBAAA;UACA,KAAAD,aAAA;UAEAgB,UAAA;YACA,KAAAf,kBAAA;UACA;QACA;UACAO,OAAA,CAAAC,KAAA;QACA;MACA,SAAAA,KAAA;QACAD,OAAA,CAAAC,KAAA,2BAAAA,KAAA;QACA,KAAAR,kBAAA;QACA,KAAAD,aAAA;MACA;IACA;IACA,MAAAiB,UAAA;MACA;QACA,MAAAH,SAAA,QAAAI,MAAA,CAAAC,MAAA,CAAAR,EAAA;QACA,MAAAS,aAAA,SAAAzB,GAAA,CAAA0B,GAAA,kBAAAP,SAAA;QACA,KAAAhB,OAAA,GAAAsB,aAAA,CAAAvB,IAAA;QACAW,OAAA,CAAAE,GAAA,2BAAAZ,OAAA,CAAAwB,QAAA;QAEAd,OAAA,CAAAE,GAAA,uBAAAZ,OAAA;;QAEA;QACA,SAAAO,IAAA,SAAAA,IAAA,CAAAkB,SAAA;UACA,KAAAvB,aAAA,QAAAK,IAAA,CAAAkB,SAAA,CAAAC,QAAA,MAAA1B,OAAA,CAAAa,EAAA;QACA;MACA,SAAAF,KAAA;QACAD,OAAA,CAAAC,KAAA,2CAAAA,KAAA;MACA;IACA;EACA;EACAgB,QAAA;IACA,UAAAC,eAAA;MAEA,KAAAC,OAAA,CAAAC,IAAA;MACA;IACA;IAEApB,OAAA,CAAAE,GAAA,kCAAAL,IAAA;IACA,KAAAY,SAAA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}