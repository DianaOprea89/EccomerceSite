{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { v4 as uuidv4 } from 'uuid'; // Import the v4 method to generate a UUID\nexport default {\n  name: \"RegisterPage\",\n  data() {\n    return {\n      id: \"\",\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      passwordConfirm: \"\"\n    };\n  },\n  methods: {\n    async register() {\n      try {\n        const generatedId = uuidv4();\n        const response = await fetch(\"http://localhost:8003/api/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            id: generatedId,\n            name: this.name,\n            email: this.email,\n            password: this.password,\n            passwordConfirm: this.passwordConfirm\n          })\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          throw new Error(data.message || \"Failed to register\");\n        }\n\n        // Store user information in localStorage upon successful registration\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\n\n        // Redirect the user to the home page or another suitable page\n        this.$router.push(\"/\");\n\n        // Handle success if needed\n      } catch (error) {\n        console.error(\"Error registering:\", error.message);\n        // Show the error to the user\n      }\n    }\n  }\n};","map":{"version":3,"names":["v4","uuidv4","name","data","id","email","password","passwordConfirm","methods","register","generatedId","response","fetch","method","headers","body","JSON","stringify","json","ok","Error","message","localStorage","setItem","user","$router","push","error","console"],"sources":["src/views/RegisterPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\">\r\n    <div class=\"input-elements\">\r\n      <label for=\"name\">Name: </label>\r\n      <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"name\" v-model=\"name\">\r\n    </div>\r\n    <div class=\"input-elements\">\r\n      <label for=\"email\">Email: </label>\r\n      <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"email\" v-model=\"email\">\r\n    </div>\r\n    <div class=\"input-elements\">\r\n      <label for=\"password\">Password: </label>\r\n      <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"password\" v-model=\"password\">\r\n    </div>\r\n    <div class=\"input-elements\">\r\n      <label for=\"confirmPassword\">Confirm Password: </label>\r\n      <input type=\"password\" name=\"password\" id=\"confirmPassword\" placeholder=\"confirm your password\" v-model=\"passwordConfirm\">\r\n    </div>\r\n    <div>\r\n      <button @click=\"register\">Register</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { v4 as uuidv4 } from 'uuid'; // Import the v4 method to generate a UUID\r\nexport default {\r\n  name: \"RegisterPage\",\r\n  data() {\r\n    return {\r\n      id:\"\",\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      passwordConfirm: \"\"\r\n    };\r\n  },\r\n  methods: {\r\n    async register() {\r\n      try {\r\n        const generatedId = uuidv4();\r\n        const response = await fetch(\"http://localhost:8003/api/register\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            id: generatedId,\r\n            name: this.name,\r\n            email: this.email,\r\n            password: this.password,\r\n            passwordConfirm: this.passwordConfirm\r\n          }),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          throw new Error(data.message || \"Failed to register\");\r\n        }\r\n\r\n        // Store user information in localStorage upon successful registration\r\n        localStorage.setItem(\"user\", JSON.stringify(data.user));\r\n\r\n        // Redirect the user to the home page or another suitable page\r\n        this.$router.push(\"/\");\r\n\r\n        // Handle success if needed\r\n      } catch (error) {\r\n        console.error(\"Error registering:\", error.message);\r\n        // Show the error to the user\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  margin: auto;\r\n  margin-top: 50px;\r\n  max-width: 500px; /* Narrow it a bit for a more card-like appearance */\r\n  min-height: auto; /* Removed the 100vh to let it adjust based on content */\r\n  background-color: #ffffff; /* A white card background, but adjust as needed */\r\n  border-radius: 8px; /* Rounded corners */\r\n  padding: 20px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1), 0 6px 20px rgba(0, 0, 0, 0.05); /* Two-layered shadow for depth */\r\n}\r\n\r\n.input-elements {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start; /* Align label and input to the start of the container */\r\n  padding: 5px 20px;\r\n  width: 100%;\r\n}\r\n\r\n.input-elements label {\r\n  width: 100px; /* Set a fixed width for labels to align the input start points */\r\n}\r\n\r\n.input-elements input {\r\n  flex: 1; /* Make inputs take the remaining available width */\r\n  margin-left: 10px;\r\n  background-color: #e9e9e9; /* Lighter shade of grey */\r\n  border: 1px solid #ccc; /* Light grey border to better define the input boundary */\r\n  padding: 5px; /* Padding for a bit of space inside the input box */\r\n}\r\n\r\n\r\nbutton {\r\n  margin-top: 20px;\r\n}\r\n\r\np {\r\n  font-size: 12px;\r\n  color: #a5a5a5;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\nbutton {\r\n  margin-top: 20px;\r\n  padding: 8px 16px; /* Add padding for better appearance */\r\n  border: none;\r\n  background-color: #007BFF; /* Sample color, adjust as needed */\r\n  color: #fff;\r\n  border-radius: 5px; /* Rounded corners for the button */\r\n  cursor: pointer; /* Change cursor on hover */\r\n  transition: background-color 0.2s; /* Smooth transition for hover effect */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3; /* Darken the color on hover */\r\n}\r\n\r\n.password-recovery p {\r\n  font-size: 12px;\r\n  color: #a5a5a5;\r\n  text-align: left; /* Ensure it's left aligned, though this is usually the default */\r\n  margin-top: 20px; /* Add a bit of space above the text */\r\n}\r\n\r\n</style>"],"mappings":";AAyBA,SAAAA,EAAA,IAAAC,MAAA;AACA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,EAAA;MACAF,IAAA;MACAG,KAAA;MACAC,QAAA;MACAC,eAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,SAAA;MACA;QACA,MAAAC,WAAA,GAAAT,MAAA;QACA,MAAAU,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;UACAC,IAAA,EAAAC,IAAA,CAAAC,SAAA;YACAb,EAAA,EAAAM,WAAA;YACAR,IAAA,OAAAA,IAAA;YACAG,KAAA,OAAAA,KAAA;YACAC,QAAA,OAAAA,QAAA;YACAC,eAAA,OAAAA;UACA;QACA;QAEA,MAAAJ,IAAA,SAAAQ,QAAA,CAAAO,IAAA;QAEA,KAAAP,QAAA,CAAAQ,EAAA;UACA,UAAAC,KAAA,CAAAjB,IAAA,CAAAkB,OAAA;QACA;;QAEA;QACAC,YAAA,CAAAC,OAAA,SAAAP,IAAA,CAAAC,SAAA,CAAAd,IAAA,CAAAqB,IAAA;;QAEA;QACA,KAAAC,OAAA,CAAAC,IAAA;;QAEA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,uBAAAA,KAAA,CAAAN,OAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}