{"ast":null,"code":"import ProductsGrid from \"@/components/ProductsGrid\";\nimport api from \"@/api/api\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"ProductDetailPage\",\n  data() {\n    return {\n      products: [],\n      product: {\n        name: \"\",\n        id: \"\"\n      },\n      itemsIsInCart: false,\n      showSuccessMessage: false\n    };\n  },\n  components: {\n    ProductsGrid\n  },\n  computed: {\n    ...mapState([\"user\", \"cart\"])\n  },\n  methods: {\n    async addToCart(product) {\n      console.log(\"User data in addToCart method:\", this.user);\n      console.log(\"Product ID:\", product.id);\n      if (!this.user || !this.user.email || !this.user.password) {\n        console.error(\"User is not authenticated. Please log in.\");\n        return;\n      }\n      try {\n        console.log(\"Adding to cart:\", product);\n        console.log(\"Product ID:\", product.id);\n        const response = await api.post('/api/cart/add', {\n          email: this.user.email,\n          password: this.user.password,\n          productId: product.id\n        });\n        console.log(\"API response:\", response); // Log the API response\n\n        if (response.status === 200) {\n          console.log(\"Product added to cart successfully on the server\");\n          this.showSuccessMessage = true;\n          this.itemsIsInCart = true;\n          setTimeout(() => {\n            this.showSuccessMessage = false;\n          }, 3000);\n        } else {\n          console.error(\"Failed to add to cart on the server\");\n        }\n      } catch (error) {\n        console.error(\"Failed to add to cart:\", error);\n        this.showSuccessMessage = false;\n        this.itemsIsInCart = false;\n      }\n    },\n    async fetchData() {\n      try {\n        console.log(this.$route.params.id);\n        const productId = 123;\n        console.log(\"Product ID from route:\", Number(this.$route.params.id));\n        const apiUrl = `/api/products/${productId}`;\n        console.log(\"API Request URL:\", apiUrl);\n        const productResult = await api.get(apiUrl);\n        this.product = productResult.data;\n\n        // Log the retrieved product data\n        console.log(\"Product data:\", this.product);\n\n        // Check if the 'id' property exists in the product object\n        if (this.product.id === undefined) {\n          console.error(\"Product ID is undefined in the fetched data.\");\n          return;\n        }\n\n        // Check if the product is in the user's cart (you can use this.user.cartItems)\n        if (this.user && this.user.cartItems) {\n          this.itemsIsInCart = this.user.cartItems.includes(this.product.id);\n          console.log(\"Is in cart:\", this.itemsIsInCart); // Log whether the product is in the cart\n        }\n      } catch (error) {\n        console.error(\"An error occurred while fetching data:\", error);\n      }\n    }\n  },\n  async created() {\n    try {\n      const result = await api.get('/api/products');\n      console.log(\"Result:\", result);\n      const products = result.data;\n      this.products = products;\n    } catch (error) {\n      console.error('An error occurred while fetching data:', error);\n    }\n    console.log(\"ProductDetailPage created hook\");\n    // this.$watch(\"user\", (newValue) => {\n    //   if (newValue) {\n    //     // The watcher is triggered when 'user' changes\n    //     console.log(\"User data in Vuex store:\", this.user);\n    //     this.fetchData();\n    //   } else {\n    //     // If 'user' is null (not authenticated), redirect to the login page\n    //     console.log(\"User not authenticated. Redirecting to login.\");\n    //     this.$router.push(\"/login\");\n    //   }\n    // });\n  }\n};","map":{"version":3,"names":["ProductsGrid","api","mapState","name","data","products","product","id","itemsIsInCart","showSuccessMessage","components","computed","methods","addToCart","console","log","user","email","password","error","response","post","productId","status","setTimeout","fetchData","$route","params","Number","apiUrl","productResult","get","undefined","cartItems","includes","created","result"],"sources":["src/views/ProductDetailPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\">\r\n    <div id=\"img-wrap\">\r\n<!--    <img :src=\"require(`../assets/${product.imageUrl}`).default\">-->\r\n    </div>\r\n    <div id=\"product-details\">\r\n      <h1>{{ product.name }}</h1>\r\n      <h3 id=\"price\">$ {{ product.price }}</h3>\r\n      <p>Average rating: {{ product.averageRating }}</p>\r\n      <button\r\n          class=\"add-to-cart\"\r\n          v-if=\"!itemsIsInCart && !showSuccessMessage\"\r\n          @click=\"addToCart(product)\"\r\n      >Add to Cart</button>\r\n\r\n      <button\r\n          class=\"green-button add-to-cart\"\r\n          v-if=\"!itemsIsInCart && showSuccessMessage\"\r\n      >Successfully added item to cart!</button>\r\n\r\n      <button\r\n          class=\"grey-button add-to-cart\"\r\n          v-if=\"itemsIsInCart\"\r\n      >Item is already in cart!</button>\r\n\r\n      <h4>Description</h4>\r\n      <p>{{ product.description }}</p>\r\n    </div>\r\n    <div>\r\n      <products-grid :products=\"products\"></products-grid>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n\r\n\r\n<script>\r\nimport ProductsGrid from \"@/components/ProductsGrid\";\r\nimport api from \"@/api/api\";\r\nimport { mapState } from \"vuex\";\r\n\r\nexport default {\r\n  name: \"ProductDetailPage\",\r\n  data() {\r\n    return {\r\n      products: [],\r\n      product: {\r\n        name: \"\",\r\n        id: \"\"\r\n      },\r\n      itemsIsInCart: false,\r\n      showSuccessMessage: false,\r\n    };\r\n  },\r\n  components: {ProductsGrid},\r\n  computed: {\r\n    ...mapState([\"user\", \"cart\"]),\r\n  },\r\n  methods: {\r\n    async addToCart(product) {\r\n      console.log(\"User data in addToCart method:\", this.user);\r\n      console.log(\"Product ID:\", product.id);\r\n\r\n      if (!this.user || !this.user.email || !this.user.password) {\r\n        console.error(\"User is not authenticated. Please log in.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        console.log(\"Adding to cart:\", product);\r\n        console.log(\"Product ID:\", product.id);\r\n\r\n        const response = await api.post('/api/cart/add', {\r\n          email: this.user.email,\r\n          password: this.user.password,\r\n          productId: product.id\r\n        });\r\n\r\n        console.log(\"API response:\", response); // Log the API response\r\n\r\n        if (response.status === 200) {\r\n          console.log(\"Product added to cart successfully on the server\");\r\n\r\n          this.showSuccessMessage = true;\r\n          this.itemsIsInCart = true;\r\n\r\n          setTimeout(() => {\r\n            this.showSuccessMessage = false;\r\n          }, 3000);\r\n        } else {\r\n          console.error(\"Failed to add to cart on the server\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to add to cart:\", error);\r\n        this.showSuccessMessage = false;\r\n        this.itemsIsInCart = false;\r\n      }\r\n    },\r\n    async fetchData() {\r\n      try {\r\n        console.log(this.$route.params.id)\r\n        const productId = 123;\r\n        console.log(\"Product ID from route:\", Number(this.$route.params.id));\r\n\r\n\r\n        const apiUrl = `/api/products/${productId}`;\r\n        console.log(\"API Request URL:\", apiUrl);\r\n\r\n        const productResult = await api.get(apiUrl);\r\n        this.product = productResult.data;\r\n\r\n        // Log the retrieved product data\r\n        console.log(\"Product data:\", this.product);\r\n\r\n        // Check if the 'id' property exists in the product object\r\n        if (this.product.id === undefined) {\r\n          console.error(\"Product ID is undefined in the fetched data.\");\r\n          return;\r\n        }\r\n\r\n        // Check if the product is in the user's cart (you can use this.user.cartItems)\r\n        if (this.user && this.user.cartItems) {\r\n          this.itemsIsInCart = this.user.cartItems.includes(this.product.id);\r\n          console.log(\"Is in cart:\", this.itemsIsInCart); // Log whether the product is in the cart\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching data:\", error);\r\n      }\r\n    }\r\n  },\r\n  async created() {\r\n    try {\r\n      const result = await api.get('/api/products');\r\n      console.log(\"Result:\", result);\r\n      const products = result.data;\r\n      this.products = products;\r\n    } catch (error) {\r\n      console.error('An error occurred while fetching data:', error);\r\n    }\r\n\r\n    console.log(\"ProductDetailPage created hook\");\r\n    // this.$watch(\"user\", (newValue) => {\r\n    //   if (newValue) {\r\n    //     // The watcher is triggered when 'user' changes\r\n    //     console.log(\"User data in Vuex store:\", this.user);\r\n    //     this.fetchData();\r\n    //   } else {\r\n    //     // If 'user' is null (not authenticated), redirect to the login page\r\n    //     console.log(\"User not authenticated. Redirecting to login.\");\r\n    //     this.$router.push(\"/login\");\r\n    //   }\r\n    // });\r\n    }\r\n\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  max-width: 600px;\r\n}\r\n\r\n#img-wrap {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  width: 400px;\r\n}\r\n\r\n#product-details {\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.add-to-cart {\r\n  width: 100%;\r\n}\r\n\r\n#price {\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 16px;\r\n}\r\n.green-button{\r\nbackground-color: green\r\n}\r\n.grey-button{\r\n  background-color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAsCA,OAAAA,YAAA;AACA,OAAAC,GAAA;AACA,SAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,OAAA;QACAH,IAAA;QACAI,EAAA;MACA;MACAC,aAAA;MACAC,kBAAA;IACA;EACA;EACAC,UAAA;IAAAV;EAAA;EACAW,QAAA;IACA,GAAAT,QAAA;EACA;EACAU,OAAA;IACA,MAAAC,UAAAP,OAAA;MACAQ,OAAA,CAAAC,GAAA,wCAAAC,IAAA;MACAF,OAAA,CAAAC,GAAA,gBAAAT,OAAA,CAAAC,EAAA;MAEA,UAAAS,IAAA,UAAAA,IAAA,CAAAC,KAAA,UAAAD,IAAA,CAAAE,QAAA;QACAJ,OAAA,CAAAK,KAAA;QACA;MACA;MAEA;QACAL,OAAA,CAAAC,GAAA,oBAAAT,OAAA;QACAQ,OAAA,CAAAC,GAAA,gBAAAT,OAAA,CAAAC,EAAA;QAEA,MAAAa,QAAA,SAAAnB,GAAA,CAAAoB,IAAA;UACAJ,KAAA,OAAAD,IAAA,CAAAC,KAAA;UACAC,QAAA,OAAAF,IAAA,CAAAE,QAAA;UACAI,SAAA,EAAAhB,OAAA,CAAAC;QACA;QAEAO,OAAA,CAAAC,GAAA,kBAAAK,QAAA;;QAEA,IAAAA,QAAA,CAAAG,MAAA;UACAT,OAAA,CAAAC,GAAA;UAEA,KAAAN,kBAAA;UACA,KAAAD,aAAA;UAEAgB,UAAA;YACA,KAAAf,kBAAA;UACA;QACA;UACAK,OAAA,CAAAK,KAAA;QACA;MACA,SAAAA,KAAA;QACAL,OAAA,CAAAK,KAAA,2BAAAA,KAAA;QACA,KAAAV,kBAAA;QACA,KAAAD,aAAA;MACA;IACA;IACA,MAAAiB,UAAA;MACA;QACAX,OAAA,CAAAC,GAAA,MAAAW,MAAA,CAAAC,MAAA,CAAApB,EAAA;QACA,MAAAe,SAAA;QACAR,OAAA,CAAAC,GAAA,2BAAAa,MAAA,MAAAF,MAAA,CAAAC,MAAA,CAAApB,EAAA;QAGA,MAAAsB,MAAA,oBAAAP,SAAA;QACAR,OAAA,CAAAC,GAAA,qBAAAc,MAAA;QAEA,MAAAC,aAAA,SAAA7B,GAAA,CAAA8B,GAAA,CAAAF,MAAA;QACA,KAAAvB,OAAA,GAAAwB,aAAA,CAAA1B,IAAA;;QAEA;QACAU,OAAA,CAAAC,GAAA,uBAAAT,OAAA;;QAEA;QACA,SAAAA,OAAA,CAAAC,EAAA,KAAAyB,SAAA;UACAlB,OAAA,CAAAK,KAAA;UACA;QACA;;QAEA;QACA,SAAAH,IAAA,SAAAA,IAAA,CAAAiB,SAAA;UACA,KAAAzB,aAAA,QAAAQ,IAAA,CAAAiB,SAAA,CAAAC,QAAA,MAAA5B,OAAA,CAAAC,EAAA;UACAO,OAAA,CAAAC,GAAA,qBAAAP,aAAA;QACA;MACA,SAAAW,KAAA;QACAL,OAAA,CAAAK,KAAA,2CAAAA,KAAA;MACA;IACA;EACA;EACA,MAAAgB,QAAA;IACA;MACA,MAAAC,MAAA,SAAAnC,GAAA,CAAA8B,GAAA;MACAjB,OAAA,CAAAC,GAAA,YAAAqB,MAAA;MACA,MAAA/B,QAAA,GAAA+B,MAAA,CAAAhC,IAAA;MACA,KAAAC,QAAA,GAAAA,QAAA;IACA,SAAAc,KAAA;MACAL,OAAA,CAAAK,KAAA,2CAAAA,KAAA;IACA;IAEAL,OAAA,CAAAC,GAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}