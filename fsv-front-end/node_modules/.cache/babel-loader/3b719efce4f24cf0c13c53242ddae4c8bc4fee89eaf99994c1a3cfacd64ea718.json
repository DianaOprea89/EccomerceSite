{"ast":null,"code":"import api from \"@/api/api\";\nimport NotFoundPage from './NotFoundPage';\nexport default {\n  components: {\n    NotFoundPage\n  },\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      cart: [],\n      products: [],\n      product: null,\n      itemsIsInCart: false,\n      showSuccesMessage: false\n    };\n  },\n  methods: {\n    async addToCart(product) {\n      const payload = {\n        email: this.email,\n        password: this.password,\n        product\n      };\n      try {\n        const response = await api.post('/api/cart/add', payload);\n        this.showSuccesMessage = true;\n        this.itemsIsInCart = true;\n        setTimeout(() => {\n          this.showSuccesMessage = false;\n        }, 3000);\n      } catch (error) {\n        console.error(\"Failed to add to cart:\", error);\n\n        // Reset the flags\n        this.showSuccesMessage = false;\n        this.itemsIsInCart = false;\n      }\n    },\n    async created() {\n      try {\n        const allProductsResult = await api.get('/api/products');\n        this.products = allProductsResult.data;\n        const productId = this.$route.params.id;\n        const productResult = await api.get(`/api/products/${productId}`);\n        this.product = productResult.data;\n\n        // Example: Check if the product is already in the cart\n        this.itemsIsInCart = this.cart.some(item => item.id === this.product.id);\n      } catch (error) {\n        console.error(\"An error occurred while fetching data:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["api","NotFoundPage","components","data","email","password","cart","products","product","itemsIsInCart","showSuccesMessage","methods","addToCart","payload","response","post","setTimeout","error","console","created","allProductsResult","get","productId","$route","params","id","productResult","some","item"],"sources":["src/views/ProductDetailPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\" v-if=\"product\">\r\n    <div id=\"img-wrap\">\r\n      <img :src=\"product.imageUrl\">\r\n    </div>\r\n    <div id=\"product-details\">\r\n      <h1>{{product.name}}</h1>\r\n      <h3 id=\"price\">$ {{product.price}}</h3>\r\n      <p>Average rating :{{product.averageRating}}</p>\r\n      <button\r\n          class=\"add-to-cart\"\r\n          v-if=\"!itemsIsInCart && !showSuccesMessage\"\r\n          v-on:click=\"addToCart(product)\"\r\n      >Add to cart</button>\r\n\r\n      <button\r\n\r\n          class=\"green-button add-to-cart\"\r\n          v-if=\"!itemsIsInCart &&  showSuccesMessage\"\r\n      > Successfully added item to cart!</button>\r\n      <button\r\n\r\n          class=\"grey-button add-to-cart\"\r\n          v-if=\"itemsIsInCart\"\r\n\r\n      >Item is already in cart!</button>\r\n      <h4>Description</h4>\r\n      <p>{{product.description}}</p>\r\n    </div>\r\n  </div>\r\n  <not-found-page v-else></not-found-page>\r\n</template>\r\n\r\n<script>\r\nimport api from \"@/api/api\";\r\nimport NotFoundPage from './NotFoundPage'\r\n\r\nexport default {\r\n  components: {\r\n    NotFoundPage,\r\n  },\r\n  data() {\r\n    return {\r\n      email: \"\",\r\n      password: \"\",\r\n      cart: [],\r\n      products: [],\r\n      product: null,\r\n      itemsIsInCart: false,\r\n      showSuccesMessage: false,\r\n    };\r\n  },\r\n  methods: {\r\n    async addToCart(product) {\r\n      const payload = {\r\n        email: this.email,\r\n        password: this.password,\r\n        product\r\n      };\r\n\r\n      try {\r\n        const response = await api.post('/api/cart/add', payload);\r\n\r\n        this.showSuccesMessage = true;\r\n        this.itemsIsInCart = true;\r\n\r\n        setTimeout(() => {\r\n          this.showSuccesMessage = false;\r\n        }, 3000);\r\n\r\n      } catch (error) {\r\n        console.error(\"Failed to add to cart:\", error);\r\n\r\n        // Reset the flags\r\n        this.showSuccesMessage = false;\r\n        this.itemsIsInCart = false;\r\n      }\r\n    },\r\n    async created() {\r\n      try {\r\n        const allProductsResult = await api.get('/api/products');\r\n        this.products = allProductsResult.data;\r\n\r\n        const productId = this.$route.params.id;\r\n        const productResult = await api.get(`/api/products/${productId}`);\r\n        this.product = productResult.data;\r\n\r\n        // Example: Check if the product is already in the cart\r\n        this.itemsIsInCart = this.cart.some(item => item.id === this.product.id);\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching data:\", error);\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  max-width: 600px;\r\n}\r\n\r\n#img-wrap {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  width: 400px;\r\n}\r\n\r\n#product-details {\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.add-to-cart {\r\n  width: 100%;\r\n}\r\n\r\n#price {\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 16px;\r\n}\r\n.green-button{\r\nbackground-color: green\r\n}\r\n.grey-button{\r\n  background-color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAkCA,OAAAA,GAAA;AACA,OAAAC,YAAA;AAEA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,KAAA;MACAC,QAAA;MACAC,IAAA;MACAC,QAAA;MACAC,OAAA;MACAC,aAAA;MACAC,iBAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,UAAAJ,OAAA;MACA,MAAAK,OAAA;QACAT,KAAA,OAAAA,KAAA;QACAC,QAAA,OAAAA,QAAA;QACAG;MACA;MAEA;QACA,MAAAM,QAAA,SAAAd,GAAA,CAAAe,IAAA,kBAAAF,OAAA;QAEA,KAAAH,iBAAA;QACA,KAAAD,aAAA;QAEAO,UAAA;UACA,KAAAN,iBAAA;QACA;MAEA,SAAAO,KAAA;QACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;;QAEA;QACA,KAAAP,iBAAA;QACA,KAAAD,aAAA;MACA;IACA;IACA,MAAAU,QAAA;MACA;QACA,MAAAC,iBAAA,SAAApB,GAAA,CAAAqB,GAAA;QACA,KAAAd,QAAA,GAAAa,iBAAA,CAAAjB,IAAA;QAEA,MAAAmB,SAAA,QAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;QACA,MAAAC,aAAA,SAAA1B,GAAA,CAAAqB,GAAA,kBAAAC,SAAA;QACA,KAAAd,OAAA,GAAAkB,aAAA,CAAAvB,IAAA;;QAEA;QACA,KAAAM,aAAA,QAAAH,IAAA,CAAAqB,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAH,EAAA,UAAAjB,OAAA,CAAAiB,EAAA;MACA,SAAAR,KAAA;QACAC,OAAA,CAAAD,KAAA,2CAAAA,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}