{"ast":null,"code":"import Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport ProductDetailPage from '@/views/ProductDetailPage';\nimport CartPage from '@/views/CartPage';\nimport ProductsPage from '@/views/ProductsPage';\nimport NotFoundPage from '@/views/NotFoundPage';\nimport loginPage from \"@/views/LoginPage\";\nimport registerPage from \"@/views/RegisterPage\";\nVue.use(VueRouter);\nconst routes = [{\n  path: '/products',\n  name: 'Products',\n  component: ProductsPage\n}, {\n  path: '/cart',\n  name: 'CartPage',\n  component: CartPage\n}, {\n  path: '/products/:id',\n  name: 'ProductDetail',\n  component: ProductDetailPage\n}, {\n  path: '/',\n  redirect: '/products',\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '*',\n  name: 'NotFoundPage',\n  component: NotFoundPage\n}, {\n  path: '/login',\n  name: 'Login',\n  component: loginPage\n}, {\n  path: '/register',\n  name: \"Register\",\n  component: registerPage,\n  meta: {\n    requiresGuest: true\n  }\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const loggedInUser = JSON.parse(localStorage.getItem('user'));\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!loggedInUser) {\n      next('/login');\n    } else {\n      next();\n    }\n  } else if (to.matched.some(record => record.meta.requiresGuest)) {\n    if (loggedInUser) {\n      next('/register'); // Change this to the appropriate route\n    } else {\n      next();\n    }\n  } else {\n    next();\n  }\n\n  // Check if user is logged in and modify the path\n  if (loggedInUser && to.path === '/') {\n    next(`/user/${loggedInUser.id}`); // Assuming you have the user's ID in the user object\n  }\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","ProductDetailPage","CartPage","ProductsPage","NotFoundPage","loginPage","registerPage","use","routes","path","name","component","redirect","meta","requiresAuth","requiresGuest","router","mode","base","process","env","BASE_URL","beforeEach","to","from","next","loggedInUser","JSON","parse","localStorage","getItem","matched","some","record","id"],"sources":["D:/laragon/www/Node exercises/repos/fsv-front-end/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport ProductDetailPage from '@/views/ProductDetailPage';\nimport CartPage from '@/views/CartPage';\nimport ProductsPage from '@/views/ProductsPage';\nimport NotFoundPage from '@/views/NotFoundPage';\nimport loginPage from \"@/views/LoginPage\";\nimport registerPage from \"@/views/RegisterPage\";\n\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path:'/products',\n    name : 'Products',\n    component: ProductsPage\n  },\n  {\n    path:'/cart',\n    name : 'CartPage',\n    component: CartPage\n  },\n  {\n    path:'/products/:id',\n    name : 'ProductDetail',\n    component: ProductDetailPage\n  },\n  {\n    path:'/',\n   redirect:'/products',\n    meta: { requiresAuth: true }\n  },\n  {\n    path:'*',\n    name: 'NotFoundPage',\n    component: NotFoundPage\n  },\n  {\n    path:'/login',\n    name : 'Login',\n    component: loginPage\n  },\n\n  {\n    path: '/register',\n    name: \"Register\",\n    component: registerPage,\n    meta: { requiresGuest: true }\n  }\n\n\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\nrouter.beforeEach((to, from, next) => {\n  const loggedInUser = JSON.parse(localStorage.getItem('user'));\n\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (!loggedInUser) {\n      next('/login');\n    } else {\n      next();\n    }\n  } else if (to.matched.some(record => record.meta.requiresGuest)) {\n    if (loggedInUser) {\n      next('/register'); // Change this to the appropriate route\n    } else {\n      next();\n    }\n  } else {\n    next();\n  }\n\n  // Check if user is logged in and modify the path\n  if (loggedInUser && to.path === '/') {\n    next(`/user/${loggedInUser.id}`); // Assuming you have the user's ID in the user object\n  }\n});\nexport default router\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,iBAAiB,MAAM,2BAA2B;AACzD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,YAAY,MAAM,sBAAsB;AAG/CP,GAAG,CAACQ,GAAG,CAACP,SAAS,CAAC;AAElB,MAAMQ,MAAM,GAAG,CACb;EACEC,IAAI,EAAC,WAAW;EAChBC,IAAI,EAAG,UAAU;EACjBC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAC,OAAO;EACZC,IAAI,EAAG,UAAU;EACjBC,SAAS,EAAET;AACb,CAAC,EACD;EACEO,IAAI,EAAC,eAAe;EACpBC,IAAI,EAAG,eAAe;EACtBC,SAAS,EAAEV;AACb,CAAC,EACD;EACEQ,IAAI,EAAC,GAAG;EACTG,QAAQ,EAAC,WAAW;EACnBC,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAC,GAAG;EACRC,IAAI,EAAE,cAAc;EACpBC,SAAS,EAAEP;AACb,CAAC,EACD;EACEK,IAAI,EAAC,QAAQ;EACbC,IAAI,EAAG,OAAO;EACdC,SAAS,EAAEN;AACb,CAAC,EAED;EACEI,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEL,YAAY;EACvBO,IAAI,EAAE;IAAEE,aAAa,EAAE;EAAK;AAC9B,CAAC,CAGF;AAED,MAAMC,MAAM,GAAG,IAAIhB,SAAS,CAAC;EAC3BiB,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1Bb;AACF,CAAC,CAAC;AAEFQ,MAAM,CAACM,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EAE7D,IAAIP,EAAE,CAACQ,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACpB,IAAI,CAACC,YAAY,CAAC,EAAE;IACvD,IAAI,CAACY,YAAY,EAAE;MACjBD,IAAI,CAAC,QAAQ,CAAC;IAChB,CAAC,MAAM;MACLA,IAAI,CAAC,CAAC;IACR;EACF,CAAC,MAAM,IAAIF,EAAE,CAACQ,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACpB,IAAI,CAACE,aAAa,CAAC,EAAE;IAC/D,IAAIW,YAAY,EAAE;MAChBD,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACLA,IAAI,CAAC,CAAC;IACR;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;;EAEA;EACA,IAAIC,YAAY,IAAIH,EAAE,CAACd,IAAI,KAAK,GAAG,EAAE;IACnCgB,IAAI,CAAE,SAAQC,YAAY,CAACQ,EAAG,EAAC,CAAC,CAAC,CAAC;EACpC;AACF,CAAC,CAAC;;AACF,eAAelB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}