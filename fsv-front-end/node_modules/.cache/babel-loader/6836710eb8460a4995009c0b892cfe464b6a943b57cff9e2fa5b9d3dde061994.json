{"ast":null,"code":"import api from \"@/api/api\";\nexport default {\n  data() {\n    return {\n      email: \"\",\n      // Initialize with appropriate default values\n      password: \"\",\n      // Initialize with appropriate default values\n      product: {\n        name: \"\"\n      },\n      itemsIsInCart: false,\n      showSuccessMessage: false,\n      cart: [] // Initialize with appropriate default values\n    };\n  },\n\n  methods: {\n    async addToCart(product) {\n      try {\n        console.log(\"Adding to cart:\", product);\n        console.log(\"Product ID:\", product.id);\n        const response = await api.post('/api/cart/add', {\n          email: this.email,\n          password: this.password,\n          productId: product.id\n        });\n        if (response.status === 200) {\n          console.log(\"Product added to cart successfully on the server\");\n          this.showSuccessMessage = true;\n          this.itemsIsInCart = true;\n          setTimeout(() => {\n            this.showSuccessMessage = false;\n          }, 3000);\n        } else {\n          console.error(\"Failed to add to cart on the server\");\n        }\n      } catch (error) {\n        console.error(\"Failed to add to cart:\", error);\n        this.showSuccessMessage = false;\n        this.itemsIsInCart = false;\n      }\n    },\n    async fetchData() {\n      try {\n        const productId = this.$route.params.id;\n        const productResult = await api.get(`/api/products/${productId}`);\n        this.product = productResult.data;\n        console.log(\"Product imageUrl:\", this.product.imageUrl);\n        console.log(\"Product data:\", this.product);\n        if (this.cart && this.product) {\n          this.itemsIsInCart = this.cart.some(item => item.id === this.product.id);\n        } else {\n          // Handle the case where either this.cart or this.product is undefined.\n        }\n      } catch (error) {\n        console.error(\"An error occurred while fetching data:\", error);\n      }\n    }\n  },\n  created() {\n    this.email = \"\";\n    this.password = \"\";\n    this.cart = [];\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["api","data","email","password","product","name","itemsIsInCart","showSuccessMessage","cart","methods","addToCart","console","log","id","response","post","productId","status","setTimeout","error","fetchData","$route","params","productResult","get","imageUrl","some","item","created"],"sources":["src/views/ProductDetailPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"page-wrap\">\r\n    <div id=\"img-wrap\">\r\n<!--    <img :src=\"require(`../assets/${product.imageUrl}`).default\">-->\r\n    </div>\r\n    <div id=\"product-details\">\r\n      <h1>{{ product.name }}</h1>\r\n      <h3 id=\"price\">$ {{ product.price }}</h3>\r\n      <p>Average rating: {{ product.averageRating }}</p>\r\n      <button\r\n          class=\"add-to-cart\"\r\n          v-if=\"!itemsIsInCart && !showSuccessMessage\"\r\n          @click=\"addToCart(product)\"\r\n      >Add to Cart</button>\r\n\r\n      <button\r\n          class=\"green-button add-to-cart\"\r\n          v-if=\"!itemsIsInCart && showSuccessMessage\"\r\n      >Successfully added item to cart!</button>\r\n\r\n      <button\r\n          class=\"grey-button add-to-cart\"\r\n          v-if=\"itemsIsInCart\"\r\n      >Item is already in cart!</button>\r\n\r\n      <h4>Description</h4>\r\n      <p>{{ product.description }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport api from \"@/api/api\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: \"\", // Initialize with appropriate default values\r\n      password: \"\", // Initialize with appropriate default values\r\n      product: {\r\n        name: \"\"\r\n      },\r\n      itemsIsInCart: false,\r\n      showSuccessMessage: false,\r\n      cart: [] // Initialize with appropriate default values\r\n    };\r\n  },\r\n  methods: {\r\n    async addToCart(product) {\r\n      try {\r\n        console.log(\"Adding to cart:\", product);\r\n        console.log(\"Product ID:\", product.id);\r\n\r\n        const response = await api.post('/api/cart/add', {\r\n          email: this.email,\r\n          password: this.password,\r\n          productId: product.id\r\n        });\r\n\r\n        if (response.status === 200) {\r\n          console.log(\"Product added to cart successfully on the server\");\r\n\r\n          this.showSuccessMessage = true;\r\n          this.itemsIsInCart = true;\r\n\r\n          setTimeout(() => {\r\n            this.showSuccessMessage = false;\r\n          }, 3000);\r\n        } else {\r\n          console.error(\"Failed to add to cart on the server\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to add to cart:\", error);\r\n        this.showSuccessMessage = false;\r\n        this.itemsIsInCart = false;\r\n      }\r\n    },\r\n    async fetchData() {\r\n      try {\r\n        const productId = this.$route.params.id;\r\n        const productResult = await api.get(`/api/products/${productId}`);\r\n        this.product = productResult.data;\r\n        console.log(\"Product imageUrl:\", this.product.imageUrl);\r\n\r\n        console.log(\"Product data:\", this.product);\r\n\r\n        if (this.cart && this.product) {\r\n          this.itemsIsInCart = this.cart.some(item => item.id === this.product.id);\r\n        } else {\r\n          // Handle the case where either this.cart or this.product is undefined.\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching data:\", error);\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n\r\n    this.email = \"\";\r\n    this.password = \"\";\r\n    this.cart = [];\r\n    this.fetchData();\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n\r\n<style scoped>\r\n#page-wrap {\r\n  margin-top: 16px;\r\n  padding: 16px;\r\n  max-width: 600px;\r\n}\r\n\r\n#img-wrap {\r\n  text-align: center;\r\n}\r\n\r\nimg {\r\n  width: 400px;\r\n}\r\n\r\n#product-details {\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.add-to-cart {\r\n  width: 100%;\r\n}\r\n\r\n#price {\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 16px;\r\n}\r\n.green-button{\r\nbackground-color: green\r\n}\r\n.grey-button{\r\n  background-color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAiCA,OAAAA,GAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,QAAA;MAAA;MACAC,OAAA;QACAC,IAAA;MACA;MACAC,aAAA;MACAC,kBAAA;MACAC,IAAA;IACA;EACA;;EACAC,OAAA;IACA,MAAAC,UAAAN,OAAA;MACA;QACAO,OAAA,CAAAC,GAAA,oBAAAR,OAAA;QACAO,OAAA,CAAAC,GAAA,gBAAAR,OAAA,CAAAS,EAAA;QAEA,MAAAC,QAAA,SAAAd,GAAA,CAAAe,IAAA;UACAb,KAAA,OAAAA,KAAA;UACAC,QAAA,OAAAA,QAAA;UACAa,SAAA,EAAAZ,OAAA,CAAAS;QACA;QAEA,IAAAC,QAAA,CAAAG,MAAA;UACAN,OAAA,CAAAC,GAAA;UAEA,KAAAL,kBAAA;UACA,KAAAD,aAAA;UAEAY,UAAA;YACA,KAAAX,kBAAA;UACA;QACA;UACAI,OAAA,CAAAQ,KAAA;QACA;MACA,SAAAA,KAAA;QACAR,OAAA,CAAAQ,KAAA,2BAAAA,KAAA;QACA,KAAAZ,kBAAA;QACA,KAAAD,aAAA;MACA;IACA;IACA,MAAAc,UAAA;MACA;QACA,MAAAJ,SAAA,QAAAK,MAAA,CAAAC,MAAA,CAAAT,EAAA;QACA,MAAAU,aAAA,SAAAvB,GAAA,CAAAwB,GAAA,kBAAAR,SAAA;QACA,KAAAZ,OAAA,GAAAmB,aAAA,CAAAtB,IAAA;QACAU,OAAA,CAAAC,GAAA,2BAAAR,OAAA,CAAAqB,QAAA;QAEAd,OAAA,CAAAC,GAAA,uBAAAR,OAAA;QAEA,SAAAI,IAAA,SAAAJ,OAAA;UACA,KAAAE,aAAA,QAAAE,IAAA,CAAAkB,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAd,EAAA,UAAAT,OAAA,CAAAS,EAAA;QACA;UACA;QAAA;MAEA,SAAAM,KAAA;QACAR,OAAA,CAAAQ,KAAA,2CAAAA,KAAA;MACA;IACA;EACA;EACAS,QAAA;IAEA,KAAA1B,KAAA;IACA,KAAAC,QAAA;IACA,KAAAK,IAAA;IACA,KAAAY,SAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}