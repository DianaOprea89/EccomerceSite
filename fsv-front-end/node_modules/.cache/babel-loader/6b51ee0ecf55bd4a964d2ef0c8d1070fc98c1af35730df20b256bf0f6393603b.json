{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080'\n});\naxiosInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const decodedToken = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n    if (decodedToken.exp > currentTime) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Token included in request headers:', token);\n    } else {\n      console.warn('Token has expired');\n      // You can handle token expiration here if needed (e.g., redirect to login)\n    }\n  } else {\n    console.log('No token found, skipping authorization header');\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response && error.response.status === 401) {\n    console.warn('Unauthorized');\n    // Handle unauthorized access here (e.g., redirect to login)\n  }\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","jwtDecode","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","decodedToken","currentTime","Date","now","exp","headers","Authorization","console","log","warn","error","Promise","reject","response","status"],"sources":["D:/laragon/www/Node exercises/repos/fsv-front-end/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8080'\r\n});\r\n\r\naxiosInstance.interceptors.request.use(config => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n        const decodedToken = jwtDecode(token);\r\n        const currentTime = Date.now() / 1000;\r\n\r\n        if (decodedToken.exp > currentTime) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n            console.log('Token included in request headers:', token);\r\n        } else {\r\n            console.warn('Token has expired');\r\n            // You can handle token expiration here if needed (e.g., redirect to login)\r\n        }\r\n    } else {\r\n        console.log('No token found, skipping authorization header');\r\n    }\r\n\r\n    return config;\r\n}, error => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n});\r\n\r\naxiosInstance.interceptors.response.use((response) => {\r\n    return response;\r\n}, (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n        console.warn('Unauthorized');\r\n        // Handle unauthorized access here (e.g., redirect to login)\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC/BC,OAAO,EAAE;AACb,CAAC,CAAC;AAEFF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC7C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAIF,KAAK,EAAE;IACP,MAAMG,YAAY,GAAGX,SAAS,CAACQ,KAAK,CAAC;IACrC,MAAMI,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IAErC,IAAIH,YAAY,CAACI,GAAG,GAAGH,WAAW,EAAE;MAChCL,MAAM,CAACS,OAAO,CAACC,aAAa,GAAI,UAAST,KAAM,EAAC;MAChDU,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEX,KAAK,CAAC;IAC5D,CAAC,MAAM;MACHU,OAAO,CAACE,IAAI,CAAC,mBAAmB,CAAC;MACjC;IACJ;EACJ,CAAC,MAAM;IACHF,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;EAChE;EAEA,OAAOZ,MAAM;AACjB,CAAC,EAAEc,KAAK,IAAI;EACRH,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEFpB,aAAa,CAACG,YAAY,CAACoB,QAAQ,CAAClB,GAAG,CAAEkB,QAAQ,IAAK;EAClD,OAAOA,QAAQ;AACnB,CAAC,EAAGH,KAAK,IAAK;EACV,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACjDP,OAAO,CAACE,IAAI,CAAC,cAAc,CAAC;IAC5B;EACJ;;EAEA,OAAOE,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;AAEF,eAAepB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}