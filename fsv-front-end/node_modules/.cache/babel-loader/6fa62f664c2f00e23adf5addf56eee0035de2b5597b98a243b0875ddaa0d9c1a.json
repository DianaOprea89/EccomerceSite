{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    email: localStorage.getItem('email') || '',\n    sessionId: localStorage.getItem('sessionId') || null,\n    name: '',\n    id: '',\n    cartItems: []\n  },\n  mutations: {\n    setUser(state, user) {\n      state.email = user.email;\n      state.name = user.name;\n      state.cartItems = user.cartItems;\n      state.id = user.id;\n\n      // Store the email and session ID in localStorage\n      localStorage.setItem('email', state.email);\n      localStorage.setItem('sessionId', state.sessionId);\n    },\n    setSessionId(state, sessionId) {\n      state.sessionId = sessionId;\n      localStorage.setItem('sessionId', sessionId);\n    },\n    UPDATE_CART(state, payload) {\n      state.cartItems = payload;\n    },\n    LOGOUT(state) {\n      state.email = '';\n      state.sessionId = null;\n      state.name = '';\n      state.id = '';\n      state.cartItems = [];\n\n      // Clear items from localStorage\n      localStorage.removeItem('email');\n      localStorage.removeItem('sessionId');\n    }\n  },\n  getters: {\n    isAuthenticated: state => !!state.sessionId,\n    getName: state => state.name,\n    getUserId: state => state.id\n  },\n  actions: {\n    setUser({\n      commit\n    }, user) {\n      commit('setUser', user);\n    },\n    setSessionId({\n      commit\n    }, sessionId) {\n      commit('setSessionId', sessionId);\n    },\n    updateCart({\n      commit\n    }, updatedCartData) {\n      commit('UPDATE_CART', updatedCartData);\n    },\n    logout({\n      commit\n    }) {\n      commit('LOGOUT');\n    }\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","email","localStorage","getItem","sessionId","name","id","cartItems","mutations","setUser","user","setItem","setSessionId","UPDATE_CART","payload","LOGOUT","removeItem","getters","isAuthenticated","getName","getUserId","actions","commit","updateCart","updatedCartData","logout"],"sources":["D:/laragon/www/Node exercises/repos/fsv-front-end/src/store/store.js"],"sourcesContent":["import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\nVue.use(Vuex);\r\n\r\nexport default new Vuex.Store({\r\n    state: {\r\n        email: localStorage.getItem('email') || '',\r\n        sessionId: localStorage.getItem('sessionId') || null,\r\n        name: '',\r\n        id: '',\r\n        cartItems: []\r\n    },\r\n\r\n    mutations: {\r\n        setUser(state, user) {\r\n            state.email = user.email;\r\n            state.name = user.name;\r\n            state.cartItems = user.cartItems;\r\n            state.id = user.id;\r\n\r\n            // Store the email and session ID in localStorage\r\n            localStorage.setItem('email', state.email);\r\n            localStorage.setItem('sessionId', state.sessionId);\r\n        },\r\n        setSessionId(state, sessionId) {\r\n            state.sessionId = sessionId;\r\n            localStorage.setItem('sessionId', sessionId);\r\n        },\r\n        UPDATE_CART(state, payload) {\r\n            state.cartItems = payload;\r\n        },\r\n        LOGOUT(state) {\r\n            state.email = '';\r\n            state.sessionId = null;\r\n            state.name = '';\r\n            state.id = '';\r\n            state.cartItems = [];\r\n\r\n            // Clear items from localStorage\r\n            localStorage.removeItem('email');\r\n            localStorage.removeItem('sessionId');\r\n        }\r\n    },\r\n\r\n    getters: {\r\n        isAuthenticated: state => !!state.sessionId,\r\n        getName: state => state.name,\r\n        getUserId: state => state.id\r\n    },\r\n\r\n    actions: {\r\n        setUser({ commit }, user) {\r\n            commit('setUser', user);\r\n        },\r\n        setSessionId({ commit }, sessionId) {\r\n            commit('setSessionId', sessionId);\r\n        },\r\n        updateCart({ commit }, updatedCartData) {\r\n            commit('UPDATE_CART', updatedCartData);\r\n        },\r\n        logout({ commit }) {\r\n            commit('LOGOUT');\r\n        }\r\n    },\r\n});\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACE,KAAK,CAAC;EAC1BC,KAAK,EAAE;IACHC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IAC1CC,SAAS,EAAEF,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI;IACpDE,IAAI,EAAE,EAAE;IACRC,EAAE,EAAE,EAAE;IACNC,SAAS,EAAE;EACf,CAAC;EAEDC,SAAS,EAAE;IACPC,OAAOA,CAACT,KAAK,EAAEU,IAAI,EAAE;MACjBV,KAAK,CAACC,KAAK,GAAGS,IAAI,CAACT,KAAK;MACxBD,KAAK,CAACK,IAAI,GAAGK,IAAI,CAACL,IAAI;MACtBL,KAAK,CAACO,SAAS,GAAGG,IAAI,CAACH,SAAS;MAChCP,KAAK,CAACM,EAAE,GAAGI,IAAI,CAACJ,EAAE;;MAElB;MACAJ,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEX,KAAK,CAACC,KAAK,CAAC;MAC1CC,YAAY,CAACS,OAAO,CAAC,WAAW,EAAEX,KAAK,CAACI,SAAS,CAAC;IACtD,CAAC;IACDQ,YAAYA,CAACZ,KAAK,EAAEI,SAAS,EAAE;MAC3BJ,KAAK,CAACI,SAAS,GAAGA,SAAS;MAC3BF,YAAY,CAACS,OAAO,CAAC,WAAW,EAAEP,SAAS,CAAC;IAChD,CAAC;IACDS,WAAWA,CAACb,KAAK,EAAEc,OAAO,EAAE;MACxBd,KAAK,CAACO,SAAS,GAAGO,OAAO;IAC7B,CAAC;IACDC,MAAMA,CAACf,KAAK,EAAE;MACVA,KAAK,CAACC,KAAK,GAAG,EAAE;MAChBD,KAAK,CAACI,SAAS,GAAG,IAAI;MACtBJ,KAAK,CAACK,IAAI,GAAG,EAAE;MACfL,KAAK,CAACM,EAAE,GAAG,EAAE;MACbN,KAAK,CAACO,SAAS,GAAG,EAAE;;MAEpB;MACAL,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;MAChCd,YAAY,CAACc,UAAU,CAAC,WAAW,CAAC;IACxC;EACJ,CAAC;EAEDC,OAAO,EAAE;IACLC,eAAe,EAAElB,KAAK,IAAI,CAAC,CAACA,KAAK,CAACI,SAAS;IAC3Ce,OAAO,EAAEnB,KAAK,IAAIA,KAAK,CAACK,IAAI;IAC5Be,SAAS,EAAEpB,KAAK,IAAIA,KAAK,CAACM;EAC9B,CAAC;EAEDe,OAAO,EAAE;IACLZ,OAAOA,CAAC;MAAEa;IAAO,CAAC,EAAEZ,IAAI,EAAE;MACtBY,MAAM,CAAC,SAAS,EAAEZ,IAAI,CAAC;IAC3B,CAAC;IACDE,YAAYA,CAAC;MAAEU;IAAO,CAAC,EAAElB,SAAS,EAAE;MAChCkB,MAAM,CAAC,cAAc,EAAElB,SAAS,CAAC;IACrC,CAAC;IACDmB,UAAUA,CAAC;MAAED;IAAO,CAAC,EAAEE,eAAe,EAAE;MACpCF,MAAM,CAAC,aAAa,EAAEE,eAAe,CAAC;IAC1C,CAAC;IACDC,MAAMA,CAAC;MAAEH;IAAO,CAAC,EAAE;MACfA,MAAM,CAAC,QAAQ,CAAC;IACpB;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}