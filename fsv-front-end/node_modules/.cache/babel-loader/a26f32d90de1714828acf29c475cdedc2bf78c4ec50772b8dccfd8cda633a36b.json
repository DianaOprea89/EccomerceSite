{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    email: '',\n    password: '',\n    name: '',\n    cart: []\n\n    // isAuthenticated: !!localStorage.getItem('user'),\n    // user: JSON.parse(localStorage.getItem('user')) || null,\n    // cart: [],\n  },\n\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n    }\n    // SET_AUTHENTICATED(state, isAuthenticated) {\n    //     state.isAuthenticated = isAuthenticated;\n    // },\n    // SET_USER(state, user) {\n    //     console.log('Setting user data:', user);\n    //     state.user = user;\n    //     localStorage.setItem('user', JSON.stringify(user));\n    //     state.isAuthenticated = true;\n    //     console.log('User data set in Vuex store:', user);\n    // },\n    // LOGOUT(state) {\n    //     state.user = null;\n    //     localStorage.removeItem('user');\n    // },\n    // ADD_TO_CART(state, product) {\n    //     console.log('Mutation: Adding to cart...', product);\n    //     const existingProduct = state.cart.find(item => item.id === product.id);\n    //     if (!existingProduct) {\n    //         state.cart.push(product);\n    //     }\n    // },\n    //\n    //\n    // REMOVE_FROM_CART(state, productId) {\n    //     const index = state.cart.findIndex(item => item.id === productId);\n    //     if (index !== -1) {\n    //         state.cart.splice(index, 1);\n    //\n    //     }\n    // },\n  },\n\n  getters: {\n    // isAuthenticated: state => {\n    //     const isAuthenticated = !!state.user;\n    //             console.log('isAuthenticated:', isAuthenticated);\n    //     return isAuthenticated;\n    // },\n    // loggedInUser: state => state.user,\n    // cartItems: state => state.cart,\n  },\n  actions: {\n    // addToCart({commit}, product) {\n    //             console.log(\"Action: Adding to cart...\", product);\n    //     commit('ADD_TO_CART', product);\n    //             console.log(\"Action: Cart after adding...\", this.state.cart);\n    // },\n    // // setUser({ commit }, user) {\n    // //     commit('SET_USER', user);\n    // // },\n    //\n    //\n    // removeFromCart({commit}, productId) {\n    //     commit('REMOVE_FROM_CART', productId);\n    // },\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","email","password","name","cart","mutations","setUser","user","getters","actions"],"sources":["D:/laragon/www/Node exercises/repos/fsv-front-end/src/store/store.js"],"sourcesContent":["import Vue from 'vue';\r\nimport Vuex from 'vuex';\r\n\r\nVue.use(Vuex);\r\n\r\nexport default new Vuex.Store({\r\n    state: {\r\n        email: '',\r\n        password: '',\r\n        name: '',\r\n        cart: []\r\n\r\n        // isAuthenticated: !!localStorage.getItem('user'),\r\n        // user: JSON.parse(localStorage.getItem('user')) || null,\r\n        // cart: [],\r\n    },\r\n\r\n    mutations: {\r\n        setUser(state, user) {\r\n            \r\n            state.user = user;\r\n        }\r\n        // SET_AUTHENTICATED(state, isAuthenticated) {\r\n        //     state.isAuthenticated = isAuthenticated;\r\n        // },\r\n        // SET_USER(state, user) {\r\n        //     console.log('Setting user data:', user);\r\n        //     state.user = user;\r\n        //     localStorage.setItem('user', JSON.stringify(user));\r\n        //     state.isAuthenticated = true;\r\n        //     console.log('User data set in Vuex store:', user);\r\n        // },\r\n        // LOGOUT(state) {\r\n        //     state.user = null;\r\n        //     localStorage.removeItem('user');\r\n        // },\r\n        // ADD_TO_CART(state, product) {\r\n        //     console.log('Mutation: Adding to cart...', product);\r\n        //     const existingProduct = state.cart.find(item => item.id === product.id);\r\n        //     if (!existingProduct) {\r\n        //         state.cart.push(product);\r\n        //     }\r\n        // },\r\n        //\r\n        //\r\n        // REMOVE_FROM_CART(state, productId) {\r\n        //     const index = state.cart.findIndex(item => item.id === productId);\r\n        //     if (index !== -1) {\r\n        //         state.cart.splice(index, 1);\r\n        //\r\n        //     }\r\n        // },\r\n    },\r\n    getters: {\r\n        // isAuthenticated: state => {\r\n        //     const isAuthenticated = !!state.user;\r\n        //             console.log('isAuthenticated:', isAuthenticated);\r\n        //     return isAuthenticated;\r\n        // },\r\n        // loggedInUser: state => state.user,\r\n        // cartItems: state => state.cart,\r\n\r\n    },\r\n    actions: {\r\n        // addToCart({commit}, product) {\r\n        //             console.log(\"Action: Adding to cart...\", product);\r\n        //     commit('ADD_TO_CART', product);\r\n        //             console.log(\"Action: Cart after adding...\", this.state.cart);\r\n        // },\r\n        // // setUser({ commit }, user) {\r\n        // //     commit('SET_USER', user);\r\n        // // },\r\n        //\r\n        //\r\n        // removeFromCart({commit}, productId) {\r\n        //     commit('REMOVE_FROM_CART', productId);\r\n        // },\r\n    },\r\n});\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACE,KAAK,CAAC;EAC1BC,KAAK,EAAE;IACHC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE;;IAEN;IACA;IACA;EACJ,CAAC;;EAEDC,SAAS,EAAE;IACPC,OAAOA,CAACN,KAAK,EAAEO,IAAI,EAAE;MAEjBP,KAAK,CAACO,IAAI,GAAGA,IAAI;IACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EACDC,OAAO,EAAE;IACL;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CAEH;EACDC,OAAO,EAAE;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;AAER,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}